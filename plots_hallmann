setwd("C:/Users/Valentina/Desktop/code")
load("basicmodel_workspace.RData")
load("newbasicmodel_workspace.RData")

# see output as MCMC objects
library(R2jags)
library(coda)
library(mcmcplots)
new_basic_mcmc<- as.mcmc(newjagsmodBasic)
old_basic_mcmc<- as.mcmc(jagsmodBasic)

new_basic_out<- summary(new_basic_mcmc)
old_basic_out<- summary(old_basic_mcmc)


#interesting parameters
params_1<- c("log.lambda", "g_intcp", "deviance")
params_2<- c("deviance")

# DESITY PLOT
denplot(new_basic_mcmc, parms = params_2)
denplot(old_basic_mcmc, parms = params_2)

#Diagnostincs PLOTS FOR EVERY PARAMETER
mcmcplot(new_basic_mcmc)
mcmcplot(old_basic_mcmc)

# INTERESTING PLOTS

library(ggplot2)
library(ggridges)
library(dplyr)
library(tidyr)
library(purrr)

# new_basic_df<- as.data.frame(as.matrix(new_basic_mcmc))%>%
#   mutate(model = "new_basic")
# old_basic_df<- as.data.frame(as.matrix(old_basic_mcmc))%>%
#   mutate(model = "old_basic")
# 
# all_basic_itrations<- rbind(old_basic_df,new_basic_df)




## ---- Calculate predicted values ----
# Get mean parameter values from posterior
settings<- function(x){
  if( x == "old"){
    print("old dataframe")
    model_used <<- jagsmodBasic
    jagsdata_used <<- jagsdataBasic
    data_used <<- data
  }
  if(x == "new" ){
    print("new dataframe")
    model_used <<- newjagsmodBasic
    jagsdata_used <<- newjagsdataBasic
    data_used <<- new_data
  }
  
  #extracting mean of every parameter
  parms_mean <- model_used$BUGSoutput$mean
  
  # 2.4 % credible interval
  parms_mean_lo <- list("b" = as.numeric(model_used$BUGSoutput$summary[1:3, 3]),
                        "c" = as.numeric(model_used$BUGSoutput$summary[4:7, 3]),
                        "deviance" = model_used$BUGSoutput$summary[8, 3],
                        "eps" = as.numeric(model_used$BUGSoutput$summary[9:71, 3]),
                        "g_intcp" = model_used$BUGSoutput$summary[72, 3],
                        "log.lambda" = model_used$BUGSoutput$summary[73, 3],
                        "sd.re" = model_used$BUGSoutput$summary[74, 3],
                        "sdhat" = model_used$BUGSoutput$summary[75, 3])
  
  # 97.5 % credible interval
  parms_mean_hi <- list("b" = as.numeric(model_used$BUGSoutput$summary[1:3, 7]),
                        "c" = as.numeric(model_used$BUGSoutput$summary[4:7, 7]),
                        "deviance" = model_used$BUGSoutput$summary[8, 7],
                        "eps" = as.numeric(model_used$BUGSoutput$summary[9:71, 7]),
                        "g_intcp" = model_used$BUGSoutput$summary[72, 7],
                        "log.lambda" = model_used$BUGSoutput$summary[73, 7],
                        "sd.re" = model_used$BUGSoutput$summary[74, 7],
                        "sdhat" = model_used$BUGSoutput$summary[75, 7])
  
  
  # Set tau & intervals of days
  t_1 <- as.vector(jagsdata_used$tau1[1:nrow(data_used)])
  t_2 <- as.vector(jagsdata_used$tau2[1:nrow(data_used)])
  ints <- map(1:nrow(data_used), ~ seq(t_1[.x], t_2[.x]))
  
  # Set year intervals
  t_1_y <- with(data_used, tapply(1:nrow(data_used), year, min))
  t_2_y <- with(data_used, tapply(1:nrow(data_used), year, max))
  ints_y <- map(1:length(t_1_y), ~ seq(t_1_y[.x], t_2_y[.x]))
  
  
  
  # Helper functions
  y <- function(x, type) {
    parms_mean <- switch(type,
                         base = parms_mean,
                         low = parms_mean_lo,
                         high = parms_mean_hi)
    
    parms_mean$g_intcp + parms_mean$log.lambda * jagsdata_used$year[x] +
      parms_mean$c[1] * jagsdata_used$daynr[x] + 
      parms_mean$c[2] *jagsdata_used$daynr2[x] + 
      parms_mean$c[3] * jagsdata_used$daynr[x] *jagsdata_used$year[x] + 
      parms_mean$c[4] * newjagsdataBasic$daynr2[x] *jagsdata_used$year[x] + 
      parms_mean$b[jagsdata_used$loctype[x]] +parms_mean$eps[jagsdata_used$plot[x]]
  }
  
  z <- function(x, ...) exp(y(x, ...))
  
  # Calculate predicted biomass
  z_val_sum <<- unlist(map(1:nrow(data_used), ~ sum(z(unlist(ints[.x]), "base"))))
  z_val <<- unlist(map(1:nrow(data_used), ~ mean(z(unlist(ints[.x]), "base"))))
  z_val_y <<- unlist(map(1:length(ints_y), ~ mean(z_val[unlist(ints_y[.x])])))
  
  # 2.5 % credible interval
  z_val_lo <<- unlist(map(1:nrow(data_used), ~ mean(z(unlist(ints[.x]), "low"))))
  z_val_y_lo <<- unlist(map(1:length(ints_y), ~ mean(z_val_lo[unlist(ints_y[.x])])))
  
  # 97.5 % credible interval
  z_val_hi <<- unlist(map(1:nrow(data_used), ~ mean(z(unlist(ints[.x]), "high"))))
  z_val_y_hi <<- unlist(map(1:length(ints_y), ~ mean(z_val_hi[unlist(ints_y[.x])])))
  

}


#settings(x = "old")
settings(x = "new")



m_bio_df <<- data.frame("year" = 1:26, "m_bio" = NA, "m_bio_lo" = NA,
                       "m_bio_hi" = NA) # Create initial df

# Fill df; set missing years to previous val
fill <- function(type) {
  coln <- switch(type,
                 base = 2,
                 low = 3,
                 high = 4)
  
  z_val_y <- switch(type,
                    base = z_val_y,
                    low = z_val_y_lo,
                    high = z_val_y_hi)

  m_bio_df[1:7, coln] <<- z_val_y[1:7]
  m_bio_df[9, coln] <<- z_val_y[8]
  m_bio_df[11:13, coln] <<- z_val_y[9:11]
  m_bio_df[15:26, coln] <<- z_val_y[12:23]
  
  m_bio_df[8, coln] <<- m_bio_df[7, coln]
  m_bio_df[10, coln] <<- m_bio_df[9, coln]
  m_bio_df[14, coln] <<- m_bio_df[13, coln]

} # helper function

fill("base")
fill("low")
fill("high")

# vr <- function(x) {
#   unlist(map(x, ~ exp(2 * y(.x) + (parms_mean$sdhat^2)) *
#                (exp((parms_mean$sdhat^2)) - 1)))
# }
# 
# var <- function(x) {
#   unlist(map(x, ~ sum(vr(unlist(ints[.x])))))
# }
# 
# m_bio <- function(x) {
#   z <- unlist(map(x, ~ sum(z(unlist(ints[.x])))))
#   var <- var(x)
#   
#   dnorm(x, mean = z, sd = var)
# }


# ---- Visualization ----
# Custom palette to match colors from paper
my_pal <- c("#f46d43", "#fdae61", "#fee090", "#ffffbf", "#e0f3f8", "#abd9e9",
            "#74add1", "#4575b4")

## Recreate Fig. 2a
tot_bm_data <- mutate(data_used, bm_p_day = biomass / (to.daynr - from.daynr)) %>%
  select(year, bm_p_day)

ggplot(tot_bm_data, aes(x = factor(year, levels = seq(1989, 2014)),
                        y = bm_p_day,
                        fill = year)) +
  geom_boxplot(outlier.alpha = .4, outlier.shape = 1) +
  scale_fill_gradient2(low = "#4575b4",
                       mid = "#fee090",
                       high = "#f46d43",
                       na.value = "grey50",
                       midpoint = 2005,
                       guide = "none") +
  geom_abline(intercept = parms_mean$g_intcp,
              slope = parms_mean$log.lambda) +
  geom_line(aes(y = m_bio, x = year), data = m_bio_df, color = "red",
            inherit.aes = F) +
  geom_line(aes(y = m_bio_lo, x = year), data = m_bio_df, color = "red", 
            linetype = 2 ,inherit.aes = F) +
  geom_line(aes(y = m_bio_hi, x = year), data = m_bio_df, color = "red",
            linetype = 2, inherit.aes = F) +
  #geom_jitter(width = .1, alpha = .2) + # optional: datapoints
  scale_x_discrete(breaks = seq(1990, 2015, by = 5), drop = F) +
  scale_y_continuous(trans = "log",
                     breaks = c(0.01, .02, .05, 0.1, 0.2, 0.5, 1, 2, 5, 10, 20, 50)) +
  theme_classic() +
  labs(y = "Biomass [g/d]", x = "Year")


## Recreate Fig. 2b
# Season from 1st of April to 30th of October; i.e. Day 91 to 303
s_bm_data <- filter(data, from.daynr >= 91 & to.daynr <= 303) %>%
  mutate(bm_p_day = biomass / (to.daynr - from.daynr)) %>% 
  select(year, bm_p_day, mean.daynr)

ggplot(s_bm_data) +
  geom_point(aes(x = mean.daynr, y = bm_p_day, color = year)) +
  scale_color_gradient2(low = "#4575b4",
                        mid = "#fee090",
                        high = "#f46d43",
                        na.value = "grey50",
                        midpoint = 2005,
                        guide = "none") +
  theme_classic() +
  labs(y = "Biomass [g/d]", x = "Day of year")
